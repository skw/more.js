#!/usr/bin/env node

/*
 #  ##############################
 #
 #    more.js CLI
 #
 #  ##############################
 */

"use strict";

/*
 #  module dependencies
 */

var program = require('commander'),
  pkg = require('../package.json'),
  fs = require('fs'),
  more = require('../index.js');

/*
 #  options
 */

program
  .version(pkg.version)
  .option('-f, --format', 'set format, defaults to styl')
  .option('--styl', 'exports to styl (default)')
  .option('--stylus', 'exports to stylus')
  .option('-m, --merge', 'merge @includes')
  .parse(process.argv);

var options = {};
options.whitespace = program.whitespace;
options.merge = program.merge;

console.log(program.args);


var handle  = function(arg, callback) {
  fs.readFile(arg, 'utf8', function (err, data) {
    if ( err ) { 
      throw err;
    }
    more( data, function( err, res) {
      if( err ) {
        callback( err );
      }
      fs.writeFile( "./output.styl", res, function( err ) {
         if( err ) {
             callback( err );
         } else {
             callback( "The file was saved!" ); 
         }
      });
    });
  });  
};

// iterate over args
//for(var i = 0; i < program.args.length; i++) {
  console.log('checking for ' + program.args[0]);
  var arg = program.args[0];
  // check if arg exists
  fs.exists(arg, function (exists) {
    if (exists) {
      fs.stat( arg, function ( err, ring ) {
        // dir
        if ( ring.isDirectory() ){
          fs.readdirSync( arg ).map( function( child ) {
            
          });
        // file
        } else if ( ring.isFile() ) {
          handle( arg, function( err, res ) {
            if( err ) {
              return console.warn( err );
            }
            console.log( res );
          });
  
        } else {
          console.warn( '"%s" type is not accepted', arg);
        }
      });
      console.log( 'YES');
    } else {
      console.warn( '"%s" does not exists', arg);
    }
  });
//}